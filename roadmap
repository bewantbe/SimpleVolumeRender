Done:
* Select an object by mouse i.e. set it to "active".
  - by single click.                    (done for swc point)
  - by box selection, multiple object.  (re-phrased)
* "Fly to" an active object.            (done for volume, picked point)
* Dynamical loading/off-loading.        (done loading, but not off-loading)
    - On demand loading of ims file and flsm file.
* Visually focus local area
  - by mask volume partially.           (done)
  - by rebuild a volume.                (ignored)
  - also mask outside fiber.            (ignored)
* Show 3D cursor.                       (done using sphere)
* ability to output scene file corresponding to current view. (done)
* View up                               (done)
* Support stereo view.                  (done)
* improve the parallel parsing of SWC file by batching.
  - almost done, debug where slow, probably the data transfer part.
  - done for now
* Design an interface for user script?
  - Use object property to serves the user (analyzing) script.
    - done for now, no multi-thread
* Solve windows Fn key and Home/Del key capture problem? such as receive the KeyPressEvent () (instead of now CharEvent())
  - Check official interactor for OnChar(), do we need to change it after switch from "CharEvent' to "KeyPressEvent"?
  - done.
* Use Namespace instead of dict for data exchange?
  - considered not suitable for core target.
* Thinking of use message(event)/callbacks mechanism, to replace the now input/configure/parser mechanism, especially to deal with event priority. e.g. after parse the commandline, sort the events according to the priority, then the GUIControl consumes the event by the order, also there maybe a special class to deal with the sorting and batch pop-out.
  - not necessary.
* Use GetInitialized () to set sleep time?
  - not necessary.
* set window size automatically, and allow command line
* Add "interpreter" for operating objects, in complement to plugin script.
  - we have two ways (at least)
    + write a widget in the window for command line operation.
      + writing a command line widget is like reinventing the wheel.
    + open another window, better ipython like, to interact with main vtk window.
      + multi-threading with vtk is seems hard, the problem is how to pass a signal to vtk's command/observer system? Probably fire a custom command?
      https://stackoverflow.com/questions/33179646/how-do-i-make-a-custom-event-with-vtk
      vtkcommand::UserEvent
      vtkCommand::UserEvent + intShift  (integer)
      https://kitware.github.io/vtk-examples/site/Cxx/Interaction/UserEvent/
      IPython: Embedding IPython
          https://ipython.org/ipython-doc/stable/interactive/reference.html#embedding-ipython
          IPython.terminal.embed.InteractiveShellEmbed
          # https://ipython.readthedocs.io/en/stable/api/generated/IPython.terminal.embed.html
  - Check how to add custom observer event, so that we can add interpretor in another thread.
    + done.
    + or we go back to Enter -> iren.Render() -> Promoter loop.
  - done single thread version.
* Fix bug about not showing linear (line-like) SWC.
* Add option group
* Auto update focu point to center
* VTK 弹窗，用于输入文本。
  - vtkOutputWindow Class Reference
  - https://vtk.org/doc/nightly/html/classvtkOutputWindow.html#details
  - not possible, but possible to output error when in full GUI mode.
* Bug: after loading volume with colorscale set, press +/- will get weird rendering results.
  - python .\img_block_viewer.py --img_path tests\ref_data\RM06_s56_c10_f3597_p0.tif
  - python .\img_block_viewer.py --img_path tests\ref_data\RM06_s56_c10_f3597_p0.tif --colorscale 10
* parallel load swc: do not save a copy of undirected graph, to save RAM.
* make vtkGetColorAny() accept RGB pair.
  - it is supporting, now add opacity (alpha).
* Testing class ArrayfyList for easier scripting about SWC in plugin.
  - Add easier runtime env, e.g. prepare swc enhanced list, for array setter.
* Command-Line Application Layouts
  - done (windows)
* write: requirements.txt
* Write tips when start IPython
* Fix plugins import
* Give a tip on GUI when in cmd mode.
  - 'Exit the command line to return GUI.'
* Support drag and drop to load data.
* command line options change Path to find plugins
* Add initial message to prompt uset to drag-and-drop and press h.
* Add tips to clicked point, by click "i" key. plus linewraping for long message.
  - now show info, but no i key and no linewraping.
* Standalone exe - now possible with pyinstaller.
* auto update window size related objects.
* allow loading obj file.
  - vtkOBJReader  read .obj
* Avoid selection to non-visible object.
* better rotation operation.
* memory problem.
  - no obvious problem found.
* coloring by branches, in plugin.
* adapt the class ArrayfyList to accept more complex neuron file name but still has int.
* add: arrayfy more property names, such as swcs.swc_name.
* add sugar for get swc_name from internal object name
* show also node id in information, by using index and tr[].
* better color map, and get the color table outside
* return to old coloring mode after plugin modification
* cutting/hiding by branch depth
  - hide the main branches by colormap (LUT)
* distance measurement for recent two points, show on status bar?
* why GetTimerEventId (), GetVTKTimerId () not work??  See here https://vtk.org/doc/nightly/html/classvtkRenderWindowInteractor.html#a7ef06e3e7c8cff5767c3b0d328934f55
  - Use @calldata_type(VTK_INT) for callback to get timer ID.
* range selection. ball range selection, i.e. 3D pick (x,y,z,r).
* reduce memory footprint.
  - double -> float. still Render() cost so much memory.
* Number of nodes could exceed 2^31, we need int64 for indexing, checked picker.
* Set auto reload modules in ipython: https://ipython.readthedocs.io/en/stable/config/extensions/autoreload.html
  - done in the hard way.


Under consideration:
* swc language project: draft it then discuss.
  - op : find axon branch
  - op : find common ancestor
  - op : output node id for given position
  - op : swc.nearest_point(a point)
* implement the mouse translation (camera_move_translational), so that we can remove inherit from vtkInteractorStyleUser instead of vtkInteractorStyleTerrain.
* auto cursor size
* Traverse with fly-to, and SVD angle adjust.
* Add scale bar.
* Add color bar.
* create cutting plane according to cursor.
* Add status bar message timeout.
* Adding current picked point to selected set.
* Solve the window init flash problem, i.e. properly set window size only once.
* hash + rnd seed file name to determine swc color?
* Support *.lpy, or convert .lyp first
* Use direction keys to navigate (go forward, backward, left, right, with shift to rotate, or small keyboard)
* test vtk picker?
* optimize volume blending, by alpha + color to approximate max(a,b).
* Add transition animation framework for moving viewport
  - Make Y direction the up direction.
  - rotation.
* more selection methods, multiple object.
* Custom volume rendering.
  - See "Implementing a custom GPU raycasting function"
    https://discourse.slicer.org/t/implementing-a-custom-gpu-raycastingfunction/13055/4
    And PRISM: An open source framework for the interactive design of GPU volume rendering shaders
  - better raycast?: vtkVolumeRayCastCompositeFunction 
* Support VR.
* note that there is a bug associate with vtkOpenGLGPUVolumeRayCastMapper, i.e. not stereo, need to use vtkFixedPointVolumeRayCastMapper.
  - See https://discourse.vtk.org/t/stereo-problem-with-gpu-volume-mappers/7512
* Support touch screen (StartPinchEvent, PinchEvent, EndPinchEvent), (SwipeEvent, StartSwipeEvent, EndSwipeEvent)
  - Try touch screen interaction, such as PinchEvent. See https://vtk.org/doc/nightly/html/classvtkRenderWindowInteractor.html#details
* use off-screen rendering for auto unit test
* try to test the sparse matrix loop finding by using the matrix multiple.
* try GetPickingManager (), GetPicker()
  - Use a box to select?: https://vtk.org/doc/nightly/html/classvtkBoxWidget.html#details
  - https://stackoverflow.com/questions/60115814/what-kind-of-vtk-vtkcommand-event-i-can-put-as-observer-when-i-select-a-box-in-a
  - HardwareSelector: https://kitware.github.io/vtk-examples/site/Python/Visualization/HardwareSelector/
  - https://kitware.github.io/vtk-js/examples/HardwareSelector.html
  - code exampe: https://discourse.vtk.org/t/how-to-pick-edge/10719/8
* SetInteractorStyle() switching
* large render: vtkUnstructuredGrid  https://discourse.vtk.org/t/how-to-draw-10000-object/8438/15
* seems usefull: AddRepresentation()  see https://vtk.org/wp-content/uploads/2021/08/VTKUsersGuide.pdf

* Try `CropVolume` according to https://discourse.slicer.org/t/stitching-artifact-with-volume-rendering/20885

# multivolume

* vtkVolumeMapper

vtkMultiVolume
vtkGPUVolumeRayCastMapper

vtkRenderer object using UseDepthPeelingOn
UseDepthPeelingForVolumesOn


https://discourse.slicer.org/t/stitching-artifact-with-volume-rendering-large-volumes-feb-17-2021-nightly/16390/18
threeDViewWidget = slicer.app.layoutManager().threeDWidget(0)
vrDisplayableManager = threeDViewWidget.threeDView().displayableManagerByClassName('vtkMRMLVolumeRenderingDisplayableManager')
vrMapper = vrDisplayableManager.GetVolumeMapper(getNode('CTChest'))
vrMapper.SetPartitions(2,2,2)


